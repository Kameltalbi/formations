/*
  # Création de la table plan_formations

  Table de base pour stocker les formations disponibles
*/

CREATE TABLE IF NOT EXISTS plan_formations (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  slug text NOT NULL UNIQUE,
  titre text NOT NULL,
  description text,
  domaine text,
  dates_label text,
  start_date date,
  horaires text,
  format text,
  public_cible text,
  prix_dt numeric(10,2),
  prix_usd numeric(10,2),
  lieu text,
  checkout_url text,
  objectifs text[],
  programme jsonb,
  is_active boolean DEFAULT true,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Index pour améliorer les performances
CREATE INDEX IF NOT EXISTS plan_formations_slug_idx ON plan_formations(slug);
CREATE INDEX IF NOT EXISTS plan_formations_start_date_idx ON plan_formations(start_date);
CREATE INDEX IF NOT EXISTS plan_formations_is_active_idx ON plan_formations(is_active);

-- Activer RLS
ALTER TABLE plan_formations ENABLE ROW LEVEL SECURITY;

-- Politique de lecture publique
CREATE POLICY "Lecture publique des formations actives"
  ON plan_formations
  FOR SELECT
  TO public
  USING (is_active = true);

-- Politique pour les administrateurs (lecture/écriture complète)
CREATE POLICY "Administrateurs peuvent tout faire sur plan_formations"
  ON plan_formations
  FOR ALL
  TO authenticated
  USING (true)
  WITH CHECK (true);

-- Fonction pour mettre à jour automatiquement updated_at
CREATE OR REPLACE FUNCTION update_plan_formations_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger pour mettre à jour automatiquement updated_at
CREATE TRIGGER update_plan_formations_updated_at
  BEFORE UPDATE ON plan_formations
  FOR EACH ROW
  EXECUTE FUNCTION update_plan_formations_updated_at();






